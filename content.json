[{"title":"hexo+github搭建个人博客主题篇","date":"2017-08-03T17:40:04.000Z","path":"2017/08/04/hexo-github搭建个人博客主题篇/","text":"上期我们讲了hexo搭建博客的基础篇，将一个博客从无到有搭建出来并部署到github上。但是hexo有个重点部分没有讲到，那就是主题。hexo允许你定制自己的主题，这就是为什么hexo可以做出丰富的界面效果。因为主题是十分重要的一部分，所以单独拿来讲讲。 hexo的主题放在themes文件夹下，一个主题就是一个文件夹，hexo的默认主题是landscape。这里有一些好的主题推荐，传送门都是github上比较火的，第一个都到8000多star了。 修改主题： 修改_config.yml文件 里的主题配置，找到文件里的theme字段，将landscape改为你要使用的主题。 主题相关配置主要是修改主题文件下的_config.yml文件配置，配置详情请查阅相关主题文档。好看实用的主题有很多，每个人的爱好也不同，可以去看看各种主题，选择自己喜欢的主题。今天我要讲的是一个我非常喜欢的主题hexo-theme-yilia。该主题简洁漂亮，并且提供了我非常喜欢的相册模块。github地址,作者的文档写的很详细，我这里就不啰嗦了。 注意：在主题theme同目录的_config.yml文件中要加入如下字段： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true // 放在配置文件的最下方。 如果配置中有什么问题可以看作者博客的备份文件传送门,虽然下载的主题文件没有相册模块，但是作者提供的备份文件中有相册模块。于是拿来分析一波，发现改一下配置，我也能使用相册功能。 1、修改source/photos文件夹下index.ejs 作者相册里有两块，一块是Ins，一块是摄影。摄影是个独立的项目，我这里只是把Ins这块留下了。 删除这段代码 1234&lt;div class=&quot;photos-btn-wrap&quot;&gt; &lt;a class=&quot;photos-btn active&quot; href=&quot;javascript:void(0)&quot;&gt;Ins&lt;/a&gt; &lt;a class=&quot;photos-btn&quot; target=&quot;_blank&quot; href=&quot;http://litten.me/gallery/&quot;&gt;摄影&lt;/a&gt;&lt;/div&gt; 12&lt;a href=&quot;https://www.instagram.com/litten225/&quot; target=&quot;_blank&quot; class=&quot;open-ins&quot;&gt;图片来自instagram，正在加载中…&lt;/a&gt; // 去掉href 、target属性，将提示文字改为你自己提示如：图片加载中。。。。 2、接下来修改source/photos文件夹下ins.js 当时查看作者ins模块下的图片，发现这个模块的文件都来自http://litten.me这个域名下。于是在photos文件夹下文件中搜索这个域名，就在ins.js中大约119行找到了域名。看了一下正好是作者的图片配置信息。作者图片都放在http://litten.me/域名对应服务器的ins-min和ins文件夹下。ins-min是小图，ins对于的是大图。 如果我们把图片的链接地址换成我们的链接地址，不久可以使用相册模块了。我们虽然没有服务器，但是图片也可以放在github上啊。于是我在github建了个picture的项目，在项目下建了个picture文件夹，传了几张图片上去了。打开图片后，只是在页面中看到图片，并不是图片的连接，右键在新标签中代开图片，这时就能获取到图片的链接地址了。 如：https://raw.githubusercontent.com/keenjaan/pictrue/master/picture/1.jpg keenjaan改为你的github名称 第一个picture改为你的仓库名称 第二个picture改为你的文件夹名称。 1.jpg几位图片名称 修改这段代码 123456var minSrc = &apos;http://litten.me/ins-min/&apos; + data.link[i] + &apos;.min.jpg&apos;; var src = &apos;http://litten.me/ins/&apos; + data.link[i]; 修改为：var minSrc = &apos;https://raw.githubusercontent.com/github名称/仓库名称/master/文件夹名称/&apos; + data.link[i] + &apos;.jpg&apos;; var src = &apos;https://raw.githubusercontent.com/github名称/仓库名称/master/文件夹名称/&apos; + data.link[i]; 作者这里用了大图和小图，你也可以学作者一样建两个文件夹，分别放不同尺寸图片。我这里只使用一种图片。 3、最后修改source/photos文件夹下ins.json 1234567891011&quot;list&quot;: [&#123; &quot;date&quot;: &quot;2017-07&quot;, &quot;arr&quot;: &#123; &quot;year&quot;: 2017, &quot;month&quot;: 7, &quot;src&quot;: [&quot;&quot;, &quot;&quot;], &quot;link&quot;: [&quot;1&quot;, &quot;2&quot;], &quot;text&quot;: [&quot;picture1&quot;, &quot;picture2&quot;], &quot;type&quot;: [&quot;image&quot;, &quot;image&quot;] &#125; &#125;] 数据是按时间分的，按月份来划分。12345678910111213date 代表时间year 年份month 月份src 可以填空&quot;&quot;link代表图片的名字text 图片底下的文字type 文件格式，image和video代表图片和视频。 如果是视频的话，要在图片文件夹里放一个视频文件和一个同名的jpg缩略图。如果分大小图的话，缩略图放小图文件夹，视频放大图文件夹。 到此一个相册功能就改好了，你现在也拥有自己的相册了，快去试试吧。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}]},{"title":"阿里云centos下部署mongodb","date":"2017-08-03T17:38:46.000Z","path":"2017/08/04/阿里云centos下部署mongodb/","text":"本教程是在阿里云cenots下部署mongodb的过程，整个过程遇到不少坑，浪费了很多时间。在网上查了很多教程，但是由于教程大多太久了，环境都不一样了，所以教程绝大部分走不通。为此走过不少坑，所以在此做一下记录。 环境：系统：阿里云centos 7.3 64位 mongodb版本： 3.4 因为使用yum安装非常方便，所以下文使用yum安装，。 修改yum包管理配置： 1vi /etc/yum.repos.d/mongodb-org-3.4.repo // 会自动新建mongodb-org-3.4.repo文件 复制下面配置信息： 12345[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/gpgcheck=0enabled=1 tips: 不懂linux去恶补下基础知识（vi 编辑器） 安装mongodb 1yum install -y mongodb-org // 一路yes安装mongodb 启动mongodb 1systemctl start mongod.service // 启动mongodb 停止mongodb 1systemctl stop mongod.service // 停止mongodb 重启mongodb 1systemctl restart mongod.service // 重启mongodb 设置mongodb开机启动 1systemctl enable mongod.service // 设置开机启动 tips： centos 7将service命令 改为systemctl。 mongodb安装成功，默认配置文件路径为：/etc/mongod.conf。执行cat /etc/mongod.conf,查看文件的配置。 配置文件是yaml 语法： 1234systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log // 日志文件储存路径 1234storage: dbPath: /var/lib/mongo // 数据储存路径 journal: enabled: true 你也可以更改储存路径，更改路径时因先新建相关文件夹和文件，这里不做修改。 本地连接mongodb： 1234mongo // 连接本地mongodbshow dbs // 查看所有数据库use mydb // 切换mydb数据库，没有会自动添加show collections // 查看集合 默认情况下，mongodb是没有安全验证的，都可以连接到该数据库。因为mongodb要求是部署在一个安全的环境中，而不需要验证。 远程连接： 在本地window中，打开cmd，执行mongo 192.168.31.54 (192.168.31.54为你的阿里云服务器外网地址)，发现连接不上，网上找了很长时间，终于解决了。 1、在阿里云esc实例中设置安全组，把27017端口开放，mongodb 默认端口为27017，阿里云为了安全端口默认都是关闭的。 2、修改mongodb配置文件： 1vi /etc/mongod.conf // 编辑配置文件 123net: port: 27017 bindIp: 127.0.0.1 // mongodb 默认绑定的IP地址 默认情况下，阿里云只绑定了127.0.0.1本地地址，只能本地访问，需要在上面加上阿里云内网地址。 1bindIp: 127.0.0.1,阿里云内网地址 重启mongodb服务器： 1systemctl restart mongod.service 在本地cmd中再执行 1mongo 阿里云外网地址 // 发现现在可以连接上了。 到此本地和远程都可以连接上mongodb了，远程可以用可视化工具Robomongo连接，直接输入阿里云外网地址和端口号27017即可以远程连接成功。虽然远程可以连接上mongodb，但是只要知道阿里云外网地址，谁都可以通过远程连接到数据库，并且修改数据库了的数据，这样是非常不安全的。所以实际部署中是不建议bindIp里面加上阿里云内网地址的，只能通过本地访问。远程连接只是为了能方便用可视化工具Robomongo方便管理数据库。如果要想用Robomongo，又想数据库不能随便被别人连接上可以吗？当然可以，只需开启身份认证。 默认情况下mongodb是关闭身份认证的，开启身份认证需如下步骤： 1、修改mongodb配置文件 1234vi /etc/mongod.conf // 编辑mongod.conf文件security: // 去掉security前面# authorization: enabled // 添加这句开启认证 在网上看了很多教程关于开启身份认证的，使用auth=true发现不行，后来才知道是教程太老了，配置字段都变了,坑的我找了很长时间。 2、添加超级管理员 默认Mongodb是没有管理员等用户信息的，开启身份认证是需要添加用户信息验证。首先添加的应该是admin数据库里的管理员账号，他用于其他数据库的用户添加、修改、删除等一些权限控制。 执行如下操作： 123456789mongo // 本地连接数据库use admin // 切换到admin数据库，没有会自动添加db.createUser( // 创建管理员用户 &#123; user: &quot;admin&quot;, // 账号 pwd: &quot;admin&quot;, // 密码 roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ] // 角色：超级管理员，数据库：admin &#125;) 创建成功后会输出Successfully added user。。。 重启mongodb 1systemctl restart mongod.service 执行 12345mongo // 连接数据库show dbs // 显示所有数据库，这步会报错，说没有通过验证。use admin // 切换到admin数据库db.auth(&apos;admin&apos;,&apos;admin&apos;) // 用上面设置的账号密码登录如果返回 &apos;1&apos;表示验证成功， 如果是 &apos;0&apos; 表示验证失败 身份验证开启了，在window端cmd中执行下面命令 1234mongo 阿里云外网地址 // 发现连接失败，因为没有通过验证。如果执行下面这句mongo 阿里云外网地址 -u &quot;admin&quot; -p &quot;admin&quot; --authenticationDatabase admin // 发现连接成功 Robomongo身份认证连接： 切换到Authorization选项，选中Perform authorization,填上Database, user name, password,就可以连接成功了。 mongodb不像mysql，验证的用户对所有数据库都有读写的能力，不同的库需要配置相关的用户信息才能对该库进行读写。比如有个myblog的数据库，需要对其有读写的能力，新建一个具有读写能力的用户。 命令如下： 123456789101112mongo // 连接数据库use admin // 切换到admin数据库db.auth(&apos;admin&apos;,&apos;admin&apos;) // auth验证登录use myblog // 切换到myblog数据库db.createUser( // 创建普通用户 &#123; user: &quot;keen&quot;, // 账号 pwd: &quot;123&quot;, // 密码 roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;myblog&quot; &#125; ] // 角色：读写，数据库：myblog &#125;)db.auth(&apos;keen&apos;, &apos;123&apos;) // 使用新建用户keen验证登录 到此整个mongodb配置结束了,关于mongodb的身份认证，以及权限控制，可以看看这篇文章，写的很详细。[传送门](http://shift-alt-ctrl.iteye.com/blog/2262709)","tags":[{"name":"阿里云","slug":"阿里云","permalink":"http://yoursite.com/tags/阿里云/"},{"name":"centos","slug":"centos","permalink":"http://yoursite.com/tags/centos/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"阿里云centos下部署ftp","date":"2017-08-03T17:30:31.000Z","path":"2017/08/04/阿里云centos下部署ftp/","text":"环境：1、Centos 7.3 2、阿里云专有网络 安装123yum install -y vsftpd // 安装systemctl start vsftpd.service // 启动vsftpd服务 ftp权限配置：vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件： 1、vsftpd.conf // 主配置文件 2、ftpusers // 禁止访问 FTP 服务器的用户列表 3、user_list // 用户访问控制 这里只做简单配置，禁止切换目录。编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改： 123anonymous_enable=NO (改为NO) // 禁用匿名用户 chroot_local_user=YES (改为YES) // 禁止切换根目录 切换目录权限配置：chroot_list_enable=YES/NO（NO） 设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。 chroot_list_file=/etc/vsftpd/chroot_list 用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。 chroot_local_user=YES/NO（NO） 用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。 12345678910111213通过搭配能实现以下几种效果：1、当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。2、当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。3、当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。4、当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。 故上面配置属于第三种情况，所有用户不能切换到其他目录。 如果使用情况1或者情况2时，要在/etc/vsftpd下新建chroot_list文件，配置相关用户。 重启服务： 1systemctl restart vsftpd.service 12345创建一个用户 ftpuseruseradd ftpuser限制用户 ftpuser只能通过 FTP 访问服务器，而不能直接登录服务器：usermod -s /sbin/nologin ftpuser 上面两步可以合二为一：1useradd ftpuser -s /sbin/nologin 为用户 ftpuser 设置密码 123456方法一：echo &quot;keenjaan&quot; | passwd ftpuser --stdin方法二：passwd ftpuser输入两遍密码即可 2.5 为用户分配主目录在/var中创建相关的目录 1mkdir -p /var/ftp/pub 配置主目录即目录权限配置： 123/var/ftp // 为主目录, 该目录只能读，不能写和执行/var/ftp/pub // 文件具有读、写、执行权限 设置访问权限 12345chmod a-w /var/ftp &amp;&amp; chmod 777 -R /var/ftp/pub对ftp文件：有读取权限，没有写入权限。对pub文件及其所有子文件：最高权限，读写，执行。 关于chmod命令：参考这个连接传送门12345678910111213141516171819202122232425262728293031chmod [-cfvR] [--help] [--version] mode file...参数 : mode : 权限设定字串，格式如下 : [ugoa...][[+-=][rwxX]...][,...]，其中u 表示该文件的拥有者[user]，g 表示与该文件的拥有者属于组(group)，o 表示其他用户[other]，a 表示这三者皆是[all]。（常用）+ 表示增加权限、（常用）- 表示取消权限、（常用）= 表示唯一设定权限。r 表示有可读取的权限，w 表示有可写入的权限，x 表示有可执行的权限，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。-c : 若该文件权限确实已经更改，才显示其更改动作-f : 若该文件权限无法被更改也不要显示错误讯息-v : 显示权限变更的详细资料-R : 对目前目录下的所有文件与子目录进行相同的权限变更 （常用）--help : 显示帮助--version : 显示版本r=4，w=2，x=1rwx属性则4+2+1=7；rw-属性则4+2=6；r-x属性则4+1=5。 设置为用户的主目录： 1usermod -d /var/ftp ftpuser 在阿里云安全组中开放21端口号。 使用FileZilla登录到ftp报错，553，最终设置FileZilla传输设置里传输模式为主动，就能正常传输了。 到此ftp配置完成。这里有篇关于ftp配置文章很详细，传送门","tags":[{"name":"阿里云","slug":"阿里云","permalink":"http://yoursite.com/tags/阿里云/"},{"name":"centos","slug":"centos","permalink":"http://yoursite.com/tags/centos/"},{"name":"ftp","slug":"ftp","permalink":"http://yoursite.com/tags/ftp/"}]},{"title":"hexo+github搭建个人博客基础篇","date":"2017-08-02T12:50:31.000Z","path":"2017/08/02/hexo+github搭建个人博客基础篇/","text":"最近想用GitHub搭建个人博客，于是下功夫搜索了一番。网上有很多的教程，最终决定用hexo来搭建，因为简单、快速。本教程只是对整个搭建的记录，以及遇到的一些坑，高手可以直接跳过。 说明：本教程针对window环境 首先hexo是一款基于Node.js的静态博客框架, 官网传送门，所以你要了解一些node基础；其次是结合github自然要有一个github账号；最后hexo生成的代码上传需要用到git。 准备工作1、安装node 2、安装git 3、申请github账号 上面步骤都很简单，不具体说明了，不懂得赶紧去恶补。 安装hexonpm install hexo-cli -g 进入放博客的文件夹，执行下面命令： hexo init blog // 该命令会创建一个blog的文件夹，里面就是相关配置文件。 cd blog // 进入blog文件夹 npm install // 安装package.json里配置的模块 hexo server // 运行本地服务，在网页中查看效果。 安装完后进入文件夹，可以看到如下文件夹及文件： node_modules // npm 的安装模块文件 scaffolds // 布局文件 source // 资源文件，文章都放在该文件下的_posts themes // 主题文件 .gitignore // git上传忽略文件配置 _config.yml // 核心配置文件 package.json // 描述npm安装包的文件 新建文章： hexo new [layout] title layout 即scaffolds 中的文件 hexo new ‘post’ // 新建文章，如果没有指定布局，默认新建的是post布局， 新文章在source 下的_posts下 hexo new page ‘node’ // 在文件夹source下，的page下新建一个名为node的文章，如果没有page文件夹会自动新建一个。 当然也可以手动添加文件和文件夹。 github上传配置当在本地写好文章后就要传到github上，下面做相关配置。 打开_config.yml文件，在最小面找到deploy字段，做如下配置： deploy: type: git repo: git@github.com:youname/youname.github.io.git（将youname换成你的GitHub名字） branch: master 然后执行npm install hexo-deployer-git –save， 安装相关模块，不然上传代码时会报错。 配置Github 创建一个与你用户名相同的仓库，如： youname.github.io，youname 换成你的github用户名 在本地git中生成钥密，ssh-keygen -t rsa -C”youremail@example.com” 邮箱换成自己邮箱，然后一路回车，使用默认值即可。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件。打开id_rsa.pub，复制里面的所有内容，然后登陆GitHub，打开个人的settings，选中SSH and GPG keys 选项，然后，点NEW SSH Key，填上任意Title，在文本框里粘贴id_rsa.pub文件的内容。 关于git的用法以及github相关配置不懂得可以移步廖雪峰老师的站点学习[传送门](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000) 生成文件上传github hexo generate // 生成静态页面文件夹public hexo server // 开启本地服务查看效果（默认端口4000） hexo deploy // 将.deploy目录部署到GitHub hexo clean // 删除public文件夹 每次上传文件前要先删除public文件夹，在生成静态页面，最后上传github，故执行如下命令： hexo clean hexo generate hexo deploy 打开你的github，查看youname.github.io文件上传成功没，如果成功了在网址中打开youname.github.io，查看博客。 注：在window环境下，执行hexo deploy命令一定要在git bash里运行，不能在cmd中运行，不然报错，当时为了这个问题坑了一把。 小技巧： 每次重新上传都要执行者三个命令会很麻烦，可以偷个懒，打开package.json文件，在里面加入scripts字段： “scripts”: { ​ “dev”: “hexo clean &amp;&amp; hexo g &amp;&amp; hexo d” } 然后在git bash 里执行npm run dev即可一步执行这些操作。 域名配置到此博客基本搭建完成，如果你想要你的博客有个独特的域名，其实配置非常简单。 1、购买域名 2、配置解析 以万网申请的域名为例，如图： 3、在在public文件夹下新建名为CNAME的文件， 在里面填写你的域名，执行hexo d上传代码，输入域名查看效果。 tips：每次执行hexo clean 后public文件都被删除了，CNAME文件也被删除了，这样每次都要重新创建这个文件会很麻烦。其实解决办法很简单，把配置文件CNAME放在source文件下，重新生成后，你发现在public文件中就有CNAME这个文件了。 结语到此博客就搭建完成了，但是对于hexo还有一块很重要的没有讲，那就是主题。hexo的强大体现在它丰富的主题。下期就讲一下我非常喜欢的一款简洁、漂亮的主题yilia。主题篇已完成[传送门]","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}]}]